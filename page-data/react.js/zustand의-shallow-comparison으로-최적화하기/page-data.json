{"componentChunkName":"component---src-templates-blog-post-js","path":"/react.js/zustand의-shallow-comparison으로-최적화하기/","result":{"data":{"site":{"siteMetadata":{"title":"사진찍는 웹 개발자의 블로그","author":"Donghoon Song","siteUrl":"https://donghoon-song.github.io","comment":{"utterances":"donghoon-song/hoon-blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"1dcd6d36-f21a-5ccf-ad03-bb1d4a02d33e","excerpt":"Zustand store에서 객체 상태를 구독할 때  비교를 사용하면 불필요한 리렌더링을 방지할 수 있다는 것을 알게 되었다. Zustand의 기본 동작 Zustand는 기본적으로 상태를 비교할 때 Object.is를 사용한다. shallow…","html":"<p>Zustand store에서 객체 상태를 구독할 때 <code class=\"language-text\">shallow</code> 비교를 사용하면 불필요한 리렌더링을 방지할 수 있다는 것을 알게 되었다.</p>\n<h2 id=\"zustand의-기본-동작\" style=\"position:relative;\"><a href=\"#zustand%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EB%8F%99%EC%9E%91\" aria-label=\"zustand의 기본 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Zustand의 기본 동작</h2>\n<p>Zustand는 기본적으로 상태를 비교할 때 <a href=\"https://github.com/pmndrs/zustand/blob/main/src/vanilla.ts#L73\">Object.is</a>를 사용한다.</p>\n<h2 id=\"shallow-비교란\" style=\"position:relative;\"><a href=\"#shallow-%EB%B9%84%EA%B5%90%EB%9E%80\" aria-label=\"shallow 비교란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shallow 비교란?</h2>\n<p><code class=\"language-text\">shallow</code>는 간단한 데이터에 대해서 빠르게 비교할 수 있는 방식이다. 중첩된 객체의 경우에는 내부 속성까지 비교하지 않고 참조값을 기준으로 판단한다. 이를 통해 선택자에서 반환하는 객체가 새로 생성되더라도 실제로 필요한 값이 변경되지 않았다면 리렌더링을 피할 수 있다.</p>\n<p>아래 처럼 <code class=\"language-text\">shallow</code>를 전달해서 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> shallow <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'zustand/shallow'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> store<span class=\"token punctuation\">.</span>user<span class=\"token operator\">?.</span>id<span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> store<span class=\"token punctuation\">.</span>user<span class=\"token operator\">?.</span>name<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    shallow <span class=\"token comment\">// 👈 명시적 설정 필요</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"primitive-타입-비교\" style=\"position:relative;\"><a href=\"#primitive-%ED%83%80%EC%9E%85-%EB%B9%84%EA%B5%90\" aria-label=\"primitive 타입 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primitive 타입 비교</h3>\n<p>숫자, 문자열, 불리언 등 primitive 타입은 <code class=\"language-text\">Object.is</code>와 <code class=\"language-text\">shallow</code> 모두 값 자체를 비교한다. 따라서, primitive 값을 선택자로 사용할 경우 별도의 <code class=\"language-text\">shallow</code> 비교 없이도 값이 같으면 리렌더링이 발생하지 않는다.</p>\n<h3 id=\"객체-비교\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%B9%84%EA%B5%90\" aria-label=\"객체 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 비교</h3>\n<p>객체를 비교할 때 <code class=\"language-text\">shallow</code>는 각 객체의 최상위 속성 값만을 비교한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> shallow <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'zustand/shallow'</span>\n\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>위의 예제에서 두 객체의 참조값은 다르지만 top-level 속성(a, b, c)의 값이 모두 같기 때문에 <code class=\"language-text\">shallow</code> 함수는 <code class=\"language-text\">true</code>를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> shallow <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'zustand/shallow'</span>\n\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> d<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> d<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>하지만 객체 내부에 중첩된 객체가 포함되어 있을 경우, shallow 비교는 해당 속성의 참조만을 비교하기 때문에 <code class=\"language-text\">false</code>를 반환한다.</p>\n<h2 id=\"shallow-비교의-동작-원리\" style=\"position:relative;\"><a href=\"#shallow-%EB%B9%84%EA%B5%90%EC%9D%98-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC\" aria-label=\"shallow 비교의 동작 원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shallow 비교의 동작 원리</h2>\n<p>Zustand의 shallow 함수는 다음과 같은 방식으로 두 객체를 비교한다.</p>\n<ol>\n<li>\n<p>두 객체가 같은 참조(메모리 주소)를 가지면 true를 반환한다.</p>\n</li>\n<li>\n<p>두 객체의 키 개수가 다르면 false를 반환한다.</p>\n</li>\n<li>\n<p>각 속성 값을 비교하며, 값이 다르면 false를 반환한다. 단, 객체나 배열인 경우 참조가 같으면 true를 반환한다.</p>\n</li>\n<li>\n<p>속성 값이 객체나 배열이면 참조(메모리 주소)를 비교하지만, 최상위 속성의 값이 동일하면 같다고 판단한다.</p>\n</li>\n</ol>\n<p>github에 있는 <code class=\"language-text\">shallow</code> 함수의 코드는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> shallow<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>objA<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> objB<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">,</span> objB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">typeof</span> objA <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span>\n    objA <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span>\n    <span class=\"token keyword\">typeof</span> objB <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span>\n    objB <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objA <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span> <span class=\"token operator\">&amp;&amp;</span> objB <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">.</span>size <span class=\"token operator\">!==</span> objB<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> objA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> objB<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objA <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Set</span> <span class=\"token operator\">&amp;&amp;</span> objB <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">.</span>size <span class=\"token operator\">!==</span> objB<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value <span class=\"token keyword\">of</span> objA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>objB<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> keysA <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keysA<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>objB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keyA <span class=\"token keyword\">of</span> keysA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">!</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>objB<span class=\"token punctuation\">,</span> keyA <span class=\"token keyword\">as</span> string<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n      <span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">[</span>keyA <span class=\"token keyword\">as</span> keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> objB<span class=\"token punctuation\">[</span>keyA <span class=\"token keyword\">as</span> keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"불필요한-리렌더링을-방지\" style=\"position:relative;\"><a href=\"#%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81%EC%9D%84-%EB%B0%A9%EC%A7%80\" aria-label=\"불필요한 리렌더링을 방지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불필요한 리렌더링을 방지</h2>\n<p>이제 본론으로 넘어 와 보자. Zustand의 useStore 훅에서 <code class=\"language-text\">shallow</code>를 활용하면 불필요한 리렌더링을 방지할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> create <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'zustand'</span>\n\n<span class=\"token keyword\">const</span> useUserStore <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">set</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 전체 user를 변경하는 함수</span>\n  <span class=\"token function-variable function\">setUser</span><span class=\"token operator\">:</span> <span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// user 객체의 일부 속성을 업데이트하는 함수</span>\n  <span class=\"token function-variable function\">updateUser</span><span class=\"token operator\">:</span> <span class=\"token parameter\">updates</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>updates <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> store<span class=\"token punctuation\">.</span>user<span class=\"token operator\">?.</span>id<span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> store<span class=\"token punctuation\">.</span>user<span class=\"token operator\">?.</span>name<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    shallow <span class=\"token comment\">// 👈 명시적 설정 필요</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 초기 상태: { user: { id: 123, name: 'John' } }</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> id1 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123 반환</span>\n\n<span class=\"token comment\">// 1. id가 변경되지 않은 업데이트</span>\n<span class=\"token function\">setStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Jane'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> id2 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123 → 리렌더링 발생 ❌</span>\n\n<span class=\"token comment\">// 2. id가 변경된 업데이트</span>\n<span class=\"token function\">setStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">456</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Jane'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> id3 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123 → 리렌더링 발생 ✅</span>\n\n<span class=\"token comment\">// 3. email이 추가된 업데이트</span>\n<span class=\"token function\">setStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span> email<span class=\"token operator\">:</span> <span class=\"token string\">'test@test.com'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> id4 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123 → 리렌더링 발생 ❌</span></code></pre></div>\n<p><code class=\"language-text\">shallow</code>를 사용하면 1번의 경우 id2를 사용하는 컴포넌트는 리렌더링이 발생하지 않는다. 왜냐하면 name은 바뀌었지만 구독하고 있는 id의 값은 123 그대로 유지되었기 때문이다.</p>\n<p>2번의 경우는 구독하고 있는 id값이 달라졌으므로 id3을 사용하는 컴포넌트는 리렌더링이 발생한다.</p>\n<p>3번처럼 새로운 속성이 추가되어도 id값은 바뀌지 않았기 때문에 id4를 사용하는 컴포넌트는 리렌더링이 발생하지 않는다.\n만약에 <code class=\"language-text\">shallow</code>를 사용하지 않으면 1번, 2번, 3번 모두 리렌더링이 발생할 것이다.</p>\n<p>이렇게 중첩되지 않는 객체나 배열을 구독하는 경우 <code class=\"language-text\">shallow</code>를 사용하면 불필요한 리렌더링을 방지할 수 있다.</p>\n<h2 id=\"필요한-값만-구독하기\" style=\"position:relative;\"><a href=\"#%ED%95%84%EC%9A%94%ED%95%9C-%EA%B0%92%EB%A7%8C-%EA%B5%AC%EB%8F%85%ED%95%98%EA%B8%B0\" aria-label=\"필요한 값만 구독하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필요한 값만 구독하기</h2>\n<p><code class=\"language-text\">shallow</code>를 사용하지 않고 이렇게 필요한 값만 구독하면 primitive 타입을 반환하기 때문에 <code class=\"language-text\">Object.is</code>에서 같다고 판단해 리렌더링이 발생하지 않는다. 그래서 보통의 경우에는 이렇게 필요한 값만 구독하는 것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useUserNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">store</span> <span class=\"token operator\">=></span> store<span class=\"token punctuation\">.</span>user<span class=\"token operator\">?.</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"불가피하게-객체를-구독하는-경우\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EA%B0%80%ED%94%BC%ED%95%98%EA%B2%8C-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EA%B5%AC%EB%8F%85%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"불가피하게 객체를 구독하는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불가피하게 객체를 구독하는 경우</h2>\n<p>하지만 객체에서 사용하는 값이 많고 업데이트가 자주 일어난다면 이렇게 객체를 한번에 구독하고 <code class=\"language-text\">shallow</code> 함수를 사용하는 것을 고려해볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> create <span class=\"token keyword\">from</span> <span class=\"token string\">'zustand'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> shallow <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'zustand/shallow'</span>\n\n<span class=\"token comment\">// Zustand 스토어 정의: 여러 user 관련 속성을 포함합니다.</span>\n<span class=\"token keyword\">const</span> useUserStore <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">set</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">'john@example.com'</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token string\">'010-1234-5678'</span><span class=\"token punctuation\">,</span>\n    address<span class=\"token operator\">:</span> <span class=\"token string\">'Seoul, Korea'</span><span class=\"token punctuation\">,</span>\n    role<span class=\"token operator\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// user 객체의 일부 또는 전체를 업데이트하는 함수</span>\n  <span class=\"token function-variable function\">updateUser</span><span class=\"token operator\">:</span> <span class=\"token parameter\">updates</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>updates <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 전체 user 객체를 shallow 비교와 함께 구독하는 훅</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">,</span> shallow<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 예시 컴포넌트: 여러 user 관련 속성을 렌더링합니다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">UserComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 전체 user 객체를 구독</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UserComponent rendered'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token constant\">ID</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Phone<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Address<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Role<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>role<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 예시 업데이트 코드 (실제 환경에서는 이벤트 핸들러 등에서 호출)</span>\n<span class=\"token comment\">// 예를 들어, 1초 후 name과 email을 업데이트하는 경우:</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  useUserStore\n    <span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span> email<span class=\"token operator\">:</span> <span class=\"token string\">'jane@example.com'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> UserComponent</code></pre></div>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>정리해보면 불필요한 리렌더링을 방지하기 위해서는</p>\n<ol>\n<li>\n<p>객체의 특정 속성만 선택하는 것이 좋다.</p>\n</li>\n<li>\n<p>중첩되지 않은 객체나 배열을 구독하는 경우 <code class=\"language-text\">shallow</code>를 사용하면 불필요한 리렌더링을 방지할 수 있다.</p>\n</li>\n</ol>","frontmatter":{"title":"Zustand의 shallow comparison으로 최적화하기","date":"February 02, 2025"}}},"pageContext":{"slug":"/react.js/zustand의-shallow-comparison으로-최적화하기/","previous":{"fields":{"slug":"/css/가운데-정렬된-네비게이션-혹은-헤더-grid로-구현하기/"},"frontmatter":{"title":"가운데 정렬된 네비게이션 혹은 헤더 grid로 구현하기"}},"next":{"fields":{"slug":"/css/css-white-space-속성-적재적소에-활용하기!/"},"frontmatter":{"title":"CSS white-space 속성 적재적소에 활용하기!"}}}},"staticQueryHashes":["2486386679","3128451518"],"slicesMap":{}}