{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/타입스크립트(typescript)로-에러-핸들링하기/","result":{"data":{"site":{"siteMetadata":{"title":"사진찍는 웹 개발자의 블로그","author":"Donghoon Song","siteUrl":"https://donghoon-song.github.io","comment":{"utterances":"donghoon-song/hoon-blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"9d3accf4-79ed-5191-a37e-f84b6dcf2bc2","excerpt":"기존에 try catch 문으로 에러를 처리하던 방식을 벗어나 타입스크립트로 에러를 처리해봤습니다. 에러 타입이 명확해지니 코드가 훨씬 명확해졌습니다. 1. 에러의 종류: 예상된 비즈니스 에러 vs. 예상치 못한 에러 에러 핸들링 전략을 수립하기 전에, 에러를 두 가지 주요 유형으로 구분하는 것이 매우 유용했습니다. 예상된 비즈니스 에러 (Expected Business Errors…","html":"<p>기존에 try catch 문으로 에러를 처리하던 방식을 벗어나 타입스크립트로 에러를 처리해봤습니다. 에러 타입이 명확해지니 코드가 훨씬 명확해졌습니다.</p>\n<h3 id=\"1-에러의-종류-예상된-비즈니스-에러-vs-예상치-못한-에러\" style=\"position:relative;\"><a href=\"#1-%EC%97%90%EB%9F%AC%EC%9D%98-%EC%A2%85%EB%A5%98-%EC%98%88%EC%83%81%EB%90%9C-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EC%97%90%EB%9F%AC-vs-%EC%98%88%EC%83%81%EC%B9%98-%EB%AA%BB%ED%95%9C-%EC%97%90%EB%9F%AC\" aria-label=\"1 에러의 종류 예상된 비즈니스 에러 vs 예상치 못한 에러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 에러의 종류: 예상된 비즈니스 에러 vs. 예상치 못한 에러</h3>\n<p>에러 핸들링 전략을 수립하기 전에, 에러를 두 가지 주요 유형으로 구분하는 것이 매우 유용했습니다.</p>\n<ul>\n<li><strong>예상된 비즈니스 에러 (Expected Business Errors)</strong>: 시스템의 정상적인 운영 과정에서 발생할 수 있는 에러입니다. 예를 들어, 사용자 등록 시 이미 존재하는 사용자 이름을 입력하거나, 유효하지 않은 입력 값을 제출하는 경우 등이 있습니다. 이러한 에러는 사용자에게 명확한 피드백을 제공하고, 경우에 따라 사용자가 직접 문제를 해결할 수 있도록 안내해야 합니다.</li>\n<li><strong>예상치 못한 에러 (Unexpected Errors)</strong>: 시스템의 정상적인 작동 중에는 발생하지 않을 것으로 예상되는 에러입니다. 데이터베이스 연결 실패, 서버 내부 로직 오류, 외부 API 호출 실패 등이 여기에 해당합니다. 이러한 에러는 일반적으로 복구하기 어렵고, 개발자에게 알림을 보내고 로그를 기록하는 것이 주된 처리 방법이 됩니다.</li>\n</ul>\n<p>어떤 에러가 예상된 에러이고 예상치 못한 에러인지는 애플리케이션의 도메인과 비즈니스 로직에 따라 달라질 수 있습니다.</p>\n<h3 id=\"2-전통적인-code-classlanguage-texttrycatchcode와-code-classlanguage-textthrowcode의-기본과-한계\" style=\"position:relative;\"><a href=\"#2-%EC%A0%84%ED%86%B5%EC%A0%81%EC%9D%B8-code-classlanguage-texttrycatchcode%EC%99%80-code-classlanguage-textthrowcode%EC%9D%98-%EA%B8%B0%EB%B3%B8%EA%B3%BC-%ED%95%9C%EA%B3%84\" aria-label=\"2 전통적인 code classlanguage texttrycatchcode와 code classlanguage textthrowcode의 기본과 한계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 전통적인 <code class=\"language-text\">try...catch</code>와 <code class=\"language-text\">throw</code>의 기본과 한계</h3>\n<p>JavaScript에서 에러를 발생시키고 처리하는 가장 기본적인 방법은 <code class=\"language-text\">throw</code>와 <code class=\"language-text\">try...catch</code> 문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 에러 발생시키기 (throw)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">findUserById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">User with id </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> not found</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 수동으로 에러 발생</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> user\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 에러 잡기 (try...catch)</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An error occurred:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"code-classlanguage-textunknowncode-타입-에러와-타입-좁히기\" style=\"position:relative;\"><a href=\"#code-classlanguage-textunknowncode-%ED%83%80%EC%9E%85-%EC%97%90%EB%9F%AC%EC%99%80-%ED%83%80%EC%9E%85-%EC%A2%81%ED%9E%88%EA%B8%B0\" aria-label=\"code classlanguage textunknowncode 타입 에러와 타입 좁히기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">unknown</code> 타입 에러와 타입 좁히기</h4>\n<p>TypeScript에서 <code class=\"language-text\">catch</code> 블록의 <code class=\"language-text\">error</code> 변수는 기본적으로 <code class=\"language-text\">unknown</code> 타입입니다. 이는 JavaScript에서 문자열, 숫자, 객체 등 어떤 것이든 <code class=\"language-text\">throw</code>될 수 있기 때문입니다. <code class=\"language-text\">unknown</code> 타입의 에러를 다루기 위해서는 해당 에러의 타입을 명확히 좁혀야 합니다. <code class=\"language-text\">instanceof</code> 연산자를 사용하여 에러의 타입을 좁힐 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Error 인스턴스인지 확인하여 타입 좁히기</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error message:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An unknown error occurred:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"code-classlanguage-textthrowcode의-한계\" style=\"position:relative;\"><a href=\"#code-classlanguage-textthrowcode%EC%9D%98-%ED%95%9C%EA%B3%84\" aria-label=\"code classlanguage textthrowcode의 한계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">throw</code>의 한계</h4>\n<p><code class=\"language-text\">throw</code>와 <code class=\"language-text\">try...catch</code>는 간단하지만 몇 가지 한계가 있습니다.</p>\n<ol>\n<li><strong>모든 가능한 에러에 대한 지식 요구</strong>: 함수가 어떤 에러를 던질 수 있는지 파악하려면 해당 함수와 그 함수가 호출하는 모든 함수를 검사해야 합니다. 이는 문서화가 최신 상태로 유지되지 않으면 파악하기 어렵습니다.</li>\n<li><strong>제어 흐름의 불연속성</strong>: <code class=\"language-text\">throw</code>가 발생하면 코드의 제어 흐름이 예측하기 어렵게 “점프”합니다. 코드를 읽는 사람이 <code class=\"language-text\">throw</code> 문을 만났을 때 해당 에러가 어디서 처리될지 (또는 처리될지 여부) 파악하기 어렵습니다.</li>\n</ol>\n<h3 id=\"3-객체-지향적-접근-커스텀-에러-클래스-활용\" style=\"position:relative;\"><a href=\"#3-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5%EC%A0%81-%EC%A0%91%EA%B7%BC-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%97%90%EB%9F%AC-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%99%9C%EC%9A%A9\" aria-label=\"3 객체 지향적 접근 커스텀 에러 클래스 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 객체 지향적 접근: 커스텀 에러 클래스 활용</h3>\n<p><code class=\"language-text\">unknown</code> 타입 에러 문제를 해결하고 에러를 더 구조적으로 관리하기 위해 커스텀 에러 클래스를 정의하는 디자인 패턴이 유용합니다.</p>\n<ol>\n<li>\n<p><strong>커스텀 에러 타입 생성</strong>: <code class=\"language-text\">Error</code> 객체를 확장하는 클래스를 정의합니다. 이 클래스는 스택 트레이스를 포함할 수 있게 해줍니다. 에러 이름에 대한 유니온 타입을 유지하여 타입 안전성과 자동 완성을 제공할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// errors.ts</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ProjectErrorName</span> <span class=\"token operator\">=</span> <span class=\"token string\">'PROJECT_LIMIT_REACHED'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'PROJECT_NOT_FOUND'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> name<span class=\"token operator\">:</span> ProjectErrorName<span class=\"token punctuation\">,</span> message<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> ProjectError<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 상속 체인 유지</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>커스텀 에러 던지기</strong>: 새로운 커스텀 에러를 인스턴스화할 때, 정의된 유니온 타입 내에서 <code class=\"language-text\">name</code> 값을 선택할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createProject</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> projectName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getUserProjectCount</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token constant\">MAX_PROJECT_LIMIT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProjectError</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'PROJECT_LIMIT_REACHED'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'프로젝트 생성 한도에 도달했습니다.'</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ... 프로젝트 생성 로직</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>커스텀 에러 잡기</strong>: <code class=\"language-text\">catch</code> 블록에서 <code class=\"language-text\">instanceof</code>를 사용하여 커스텀 에러 타입을 좁힐 수 있습니다. 에러가 좁혀지면 <code class=\"language-text\">error.name</code>을 통해 특정 에러에 대한 로직을 수행할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createProject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user123'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'My New Project'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ProjectError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'PROJECT_LIMIT_REACHED'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'사용자에게 메시지 표시:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'PROJECT_NOT_FOUND'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'프로젝트를 찾을 수 없습니다.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'일반 에러:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'알 수 없는 에러:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>재사용 가능한 에러 베이스 만들기</strong>: 여러 도메인에서 커스텀 에러 클래스를 사용해야 할 경우, DRY(Don’t Repeat Yourself) 원칙을 위해 제네릭을 사용하는 <code class=\"language-text\">ErrorBase</code> 클래스를 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// base-error.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorBase<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> name<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// project-errors.ts</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ProjectErrorName</span> <span class=\"token operator\">=</span> <span class=\"token string\">'PROJECT_LIMIT_REACHED'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'PROJECT_NOT_FOUND'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProjectError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ErrorBase<span class=\"token operator\">&lt;</span>ProjectErrorName<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<h3 id=\"4-함수형-접근-code-classlanguage-textresultcode-타입-패턴\" style=\"position:relative;\"><a href=\"#4-%ED%95%A8%EC%88%98%ED%98%95-%EC%A0%91%EA%B7%BC-code-classlanguage-textresultcode-%ED%83%80%EC%9E%85-%ED%8C%A8%ED%84%B4\" aria-label=\"4 함수형 접근 code classlanguage textresultcode 타입 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 함수형 접근: <code class=\"language-text\">Result</code> 타입 패턴</h3>\n<p><code class=\"language-text\">throw</code> 방식의 한계를 극복하기 위해 함수형 프로그래밍에서 영감을 받은 <code class=\"language-text\">Result</code> 타입을 사용하는 방법이 있습니다. 이 접근 방식은 함수가 에러를 발생시킬 수 있다는 사실을 반환 타입에 명시적으로 인코딩합니다.</p>\n<h4 id=\"code-classlanguage-textresultltt-ecode-타입의-개념\" style=\"position:relative;\"><a href=\"#code-classlanguage-textresultltt-ecode-%ED%83%80%EC%9E%85%EC%9D%98-%EA%B0%9C%EB%85%90\" aria-label=\"code classlanguage textresultltt ecode 타입의 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Result&lt;T, E></code> 타입의 개념</h4>\n<p><code class=\"language-text\">Result</code> 타입은 성공적인 값(<code class=\"language-text\">T</code>) 또는 에러 값(<code class=\"language-text\">E</code>) 중 하나를 포함할 수 있는 공용체(discriminated union)입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Result<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> result<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span><span class=\"token punctuation\">;</span> value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> result<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">;</span> error<span class=\"token operator\">:</span> <span class=\"token constant\">E</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span>newUser<span class=\"token operator\">:</span> NewUser<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Result<span class=\"token operator\">&lt;</span>User<span class=\"token punctuation\">,</span> Error<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> result<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> newUser <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> result<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Username already taken'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 호출 코드</span>\n<span class=\"token keyword\">const</span> userResult <span class=\"token operator\">=</span> <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'hunter2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userResult<span class=\"token punctuation\">.</span>result <span class=\"token operator\">===</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Failed to create user: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userResult<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">User created: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userResult<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 방식은 함수가 반환할 수 있는 모든 에러를 명시적으로 선언하므로, 호출하는 쪽에서 어떤 에러를 처리해야 하는지 쉽게 알 수 있습니다. 또한, 제어 흐름이 순차적으로 진행되어 코드 가독성이 향상됩니다.</p>\n<p>함수형 접근을 하니 예상된 비즈니스 에러를 핸들링하기 수월해졌고 catch 절에서는 여전히 예상치 못한 에러를 처리할 수 있어서 컨텍스트를 분리해서 생각할 수 있었습니다.</p>","frontmatter":{"title":"타입스크립트(TypeScript)로 에러 핸들링하기","date":"August 07, 2025"}}},"pageContext":{"slug":"/typescript/타입스크립트(typescript)로-에러-핸들링하기/","previous":{"fields":{"slug":"/books/엔지니어링-리더십-–-실력-있는-개발자에서-조직적-영향력자로-성장하기까지/"},"frontmatter":{"title":"엔지니어링 리더십 – 실력 있는 개발자에서 조직적 영향력자로 성장하기까지"}},"next":{"fields":{"slug":"/GitKraken/커밋-메시지가-고민일-때-gitkraken이-대신-써줍니다/"},"frontmatter":{"title":"커밋 메시지가 고민일 때 GitKraken이 대신 써줍니다"}}}},"staticQueryHashes":["2486386679","3128451518"],"slicesMap":{}}