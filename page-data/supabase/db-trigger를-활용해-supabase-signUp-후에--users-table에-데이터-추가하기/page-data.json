{"componentChunkName":"component---src-templates-blog-post-js","path":"/supabase/db-trigger를-활용해-supabase-signUp-후에--users-table에-데이터-추가하기/","result":{"data":{"site":{"siteMetadata":{"title":"사진찍는 웹 개발자의 블로그","author":"Donghoon Song","siteUrl":"https://donghoon-song.github.io","comment":{"utterances":"donghoon-song/hoon-blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"97b92541-98af-595b-bc01-e2b7f96e74f6","excerpt":"배경 supabase를 활용해 사이드 프로젝트를 하다가 겪었던 문제를 해결한 경험이다. supabase auth를 활용해 google signUp을 했는데, data는  schema의 users table에 저장되는데, 보안상의 목적으로 외부에서 접근할 수 없도록 설정되어 있다. 내용 그래서 user data로 다른 table의 data와 상호작용하기 위해  schema에 table을 만들어야 했다. 이와 관련한 supabase docs가 아래 있었고 나는 이렇게 학부생 때 배웠던 db…","html":"<h2 id=\"배경\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EA%B2%BD\" aria-label=\"배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배경</h2>\n<p>supabase를 활용해 사이드 프로젝트를 하다가 겪었던 문제를 해결한 경험이다. supabase auth를 활용해 google signUp을 했는데, data는 <code class=\"language-text\">auth</code> schema의 users table에 저장되는데, 보안상의 목적으로 외부에서 접근할 수 없도록 설정되어 있다.</p>\n<h2 id=\"내용\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EC%9A%A9\" aria-label=\"내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내용</h2>\n<p>그래서 user data로 다른 table의 data와 상호작용하기 위해 <code class=\"language-text\">public</code> schema에 table을 만들어야 했다.</p>\n<p>이와 관련한 supabase docs가 아래 있었고 나는 이렇게 학부생 때 배웠던 db trigger를 사이드 프로젝트 하면서 처음 쓰게 되었다.</p>\n<p><a href=\"https://supabase.com/docs/guides/auth/managing-user-data\">supabase-auth/managing-user-data</a></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- inserts a row into public.profiles</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">.</span>handle_new_user<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">returns</span> <span class=\"token keyword\">trigger</span>\n<span class=\"token keyword\">language</span> plpgsql\nsecurity <span class=\"token keyword\">definer</span> <span class=\"token keyword\">set</span> search_path <span class=\"token operator\">=</span> <span class=\"token keyword\">public</span>\n<span class=\"token keyword\">as</span> $$\n<span class=\"token keyword\">begin</span>\n  <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">.</span>profiles <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span>new<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> new<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span>\n$$<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- trigger the function every time a user is created</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">trigger</span> on_auth_user_created\n  <span class=\"token keyword\">after</span> <span class=\"token keyword\">insert</span> <span class=\"token keyword\">on</span> auth<span class=\"token punctuation\">.</span>users\n  <span class=\"token keyword\">for each row</span> <span class=\"token keyword\">execute</span> <span class=\"token keyword\">procedure</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">.</span>handle_new_user<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n$$<span class=\"token punctuation\">;</span></code></pre></div>\n<p>예제를 보면, auth.users table에 insert가 일어나면 <code class=\"language-text\">handle_new_user</code> function이 실행되고, public.profiles table에 id를 넣는다.</p>\n<p>나는 사용자가 회원가입을 하면 public.users table에 id, email, name(email에서 @앞)을 넣고 싶었다.</p>\n<p>email에서 name을 추출하기 위해서 postgre <code class=\"language-text\">split_part</code> function을 활용할 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token operator\">or</span> <span class=\"token keyword\">replace</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">.</span>handle_new_user<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">returns</span> <span class=\"token keyword\">trigger</span>\n    <span class=\"token keyword\">language</span> plpgsql\nsecurity <span class=\"token keyword\">definer</span> <span class=\"token keyword\">set</span> search_path <span class=\"token operator\">=</span> <span class=\"token keyword\">public</span>\n<span class=\"token keyword\">as</span> $$\n<span class=\"token keyword\">begin</span>\n    <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">.</span>users <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span>new<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> split_part<span class=\"token punctuation\">(</span>new<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span> <span class=\"token string\">'@'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> new<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> new<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span>\n$$<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"피드백\" style=\"position:relative;\"><a href=\"#%ED%94%BC%EB%93%9C%EB%B0%B1\" aria-label=\"피드백 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>피드백</h2>\n<p>생활코딩에 글을 공유하니까 지나가던 개발자님께서 왜 트리거를 썼는지 물어봐주셨다. 글을 본 내 친구와 지인분도 현업에서 트리거는 거의 쓰지 않는다고 알려줬다.\n가장 큰 이유는 유지보수가 힘들다는 것이다. 데이터베이스에 달려 있다 보니 파악하기가 어렵고, 예상치 못한 오류가 발생할 수도 있다. 그래서 로직은 모두 코드단에서 구현하고 관리한다고 한다. 그리고 또 다른 이유는 성능인데, 아무래도 디비 CPU를 사용하다 보니까 성능이 저하될 수 있다.</p>\n<p>아무래도 프론트엔드 개발자이다보니까, trigger는 현업에서도 쓸 일이 없어서 이런 실무지식은 아예 모르고 있었는데 이번 일을 계기로 알 수 있어서 좋았다. 지식이 늘었다.</p>","frontmatter":{"title":"db trigger를 활용해 supabase signUp 후에  users table에 데이터 추가하기","date":"June 09, 2023"}}},"pageContext":{"slug":"/supabase/db-trigger를-활용해-supabase-signUp-후에--users-table에-데이터-추가하기/","previous":{"fields":{"slug":"/supabase/supabase로-구글로그인(소셜로그인)-구현하기/"},"frontmatter":{"title":"supabase로 구글로그인(소셜로그인) 구현하기"}},"next":{"fields":{"slug":"/eslint/do-not-use-\"new\"-for-side-effects-eslint-rule/"},"frontmatter":{"title":"Do not use \"new\" for side effects eslint rule"}}}},"staticQueryHashes":["2486386679","3128451518"],"slicesMap":{}}