{"componentChunkName":"component---src-templates-blog-post-js","path":"/nuxt/nuxt3-server-api-만들기-&-env-접근/","result":{"data":{"site":{"siteMetadata":{"title":"사진찍는 웹 개발자의 블로그","author":"Donghoon Song","siteUrl":"https://donghoon-song.github.io","comment":{"utterances":"donghoon-song/hoon-blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"32c774b0-b4ff-52ff-a593-0c574a8cd349","excerpt":"nuxt3 서버에서 api를 만들려면  디렉토리 안에 파일을 만들면 된다.\nnuxt는  directory를 자동으로 스캔해 api를 등록한다. 예를 들어,  ->  endpoint가 생긴다. 앱 내에서 를 통해 API를 호출할 수 있다. 예제로 잘 작동하는 것을 확인한 후에 구현하고자 하는 로직을 추가했다.\n간단하게 message를 받아 openai api에 보낸 응답값을 return하는 api이다. 파일은 보는바와 같이 defineEventHandler로 감싸서 export…","html":"<p>nuxt3 서버에서 api를 만들려면 <code class=\"language-text\">server/api</code> 디렉토리 안에 파일을 만들면 된다.\nnuxt는 <code class=\"language-text\">~/server/api</code> directory를 자동으로 스캔해 api를 등록한다.</p>\n<p>예를 들어, <code class=\"language-text\">server/api/ai.ts</code> -> <code class=\"language-text\">/api/ai</code> endpoint가 생긴다.</p>\n<p>앱 내에서 <code class=\"language-text\">$fetch(\"/api/ai\")</code>를 통해 API를 호출할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ~/server/api/ai.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineEventHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>예제로 잘 작동하는 것을 확인한 후에 구현하고자 하는 로직을 추가했다.\n간단하게 message를 받아 openai api에 보낸 응답값을 return하는 api이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ~/server/api/ai.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Configuration<span class=\"token punctuation\">,</span> OpenAIApi <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'openai'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineEventHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">readBody</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">OPENAI_API_KEY</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRuntimeConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    apiKey<span class=\"token operator\">:</span> <span class=\"token constant\">OPENAI_API_KEY</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> openai <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OpenAIApi</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> completion <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> openai<span class=\"token punctuation\">.</span><span class=\"token function\">createCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    model<span class=\"token operator\">:</span> <span class=\"token string\">'text-davinci-003'</span><span class=\"token punctuation\">,</span>\n    prompt<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> completion<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>choices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>파일은 보는바와 같이 defineEventHandler로 감싸서 export하면 된다.</p>\n<p>여기서 문서를 참고해야 했던 부분은</p>\n<ol>\n<li>env값에 접근하는 방식</li>\n<li>request body를 읽는 방식\n이었다.</li>\n</ol>\n<p>먼저 env는 process.env를 통해 접근할 수 없고, nuxt runtime config를 이용해야 했다.\n<code class=\"language-text\">nuxt.config.ts</code>에서 runtimeConfig에 등록하면 앱에서 <code class=\"language-text\">useRuntimeConfig</code>를 통해 접근할 수 있다.</p>\n<p>사용하기에 번거로워진 거 같은데, 공식문서에서 이는 .env 내용이 변경되었을 때 변화를 감지해 HMR을 지원하기 위함이라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// nuxt.config.ts</span>\n<span class=\"token comment\">// https://nuxt.com/docs/api/configuration/nuxt-config</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineNuxtConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  runtimeConfig<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">OPENAI_API_KEY</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">OPENAI_API_KEY</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>전달받는 event가 H3Event 타입이어서 생소했는데, body를 읽는 방식은 공식 문서에 나와 있듯이 <code class=\"language-text\">readBody</code> api를 활용하면 됐다.</p>\n<p>추가적으로, 파일명으로 allow method를 지정할 수 있다.\n<code class=\"language-text\">ai.ts</code> -> <code class=\"language-text\">ai.post.ts</code>로 변경하면 post method만 허용한다.</p>","frontmatter":{"title":"nuxt3 server api 만들기 & env 접근","date":"May 06, 2023"}}},"pageContext":{"slug":"/nuxt/nuxt3-server-api-만들기-&-env-접근/","previous":{"fields":{"slug":"/vue.js/vue-composition-api/"},"frontmatter":{"title":"vue composition api"}},"next":{"fields":{"slug":"/vscode/vscode-error-lens-extension(야무진-익스텐션-추천)/"},"frontmatter":{"title":"vscode error lens extension(야무진 익스텐션 추천)"}}}},"staticQueryHashes":["2486386679","3128451518"],"slicesMap":{}}