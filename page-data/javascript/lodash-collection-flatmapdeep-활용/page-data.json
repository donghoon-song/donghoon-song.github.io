{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/lodash-collection-flatmapdeep-활용/","result":{"data":{"site":{"siteMetadata":{"title":"사진찍는 웹 개발자의 블로그","author":"Donghoon Song","siteUrl":"https://donghoon-song.github.io","comment":{"utterances":"donghoon-song/hoon-blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a7883f8f-bc29-517a-a221-ae2a27e54bc9","excerpt":"개발을 하다가 여러가지 input값들을 한번에 관리하는 경우가 생겼고, 각 input이 모두 비어있는지를 체크하고 싶었습니다. 활용할만한 라이브러리를 찾아보다가 lodash collection의 flatMapDeep을 활용하면 쉽게 해결할 수 있었습니다. 코드 확인하기 콘솔창을 보시면 모든 input value값들을 펼쳐서 배열에 저장할 수 있었고 문제를 해결할 수 있었습니다 :)\n flatMapDepth의 내부구현은 어떻게 되어 있을지 궁금해서 찾아봤습니다. collection…","html":"<p>개발을 하다가 여러가지 input값들을 한번에 관리하는 경우가 생겼고, 각 input이 모두 비어있는지를 체크하고 싶었습니다. 활용할만한 라이브러리를 찾아보다가 lodash collection의 flatMapDeep을 활용하면 쉽게 해결할 수 있었습니다.</p>\n<p><a href=\"https://codesandbox.io/s/lodash-playground-forked-pm6lyx?file=/src/index.js\">코드 확인하기</a></p>\n<p>콘솔창을 보시면 모든 input value값들을 펼쳐서 배열에 저장할 수 있었고 문제를 해결할 수 있었습니다 :)\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/32301380/./184536409-f5399eeb-0b48-496f-9f33-fbd7b748d10f.png\"></p>\n<p>flatMapDepth의 내부구현은 어떻게 되어 있을지 궁금해서 찾아봤습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> baseFlatten <span class=\"token keyword\">from</span> <span class=\"token string\">'./.internal/baseFlatten.js'</span>\n<span class=\"token keyword\">import</span> map <span class=\"token keyword\">from</span> <span class=\"token string\">'./map.js'</span>\n\n<span class=\"token comment\">/**\n * This method is like `flatMap` except that it recursively flattens the\n * mapped results up to `depth` times.\n *\n * @since 4.7.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {number} [depth=1] The maximum recursion depth.\n * @returns {Array} Returns the new flattened array.\n * @see flatMap, flatMapDeep, flatten, flattenDeep, flattenDepth, map, mapKeys, mapValues\n * @example\n *\n * function duplicate(n) {\n *   return [[[n, n]]]\n * }\n *\n * flatMapDepth([1, 2], duplicate, 2)\n * // => [[1, 1], [2, 2]]\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">flatMapDepth</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">collection<span class=\"token punctuation\">,</span> iteratee<span class=\"token punctuation\">,</span> depth</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  depth <span class=\"token operator\">=</span> depth <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">+</span>depth\n  <span class=\"token keyword\">return</span> <span class=\"token function\">baseFlatten</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">,</span> iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> flatMapDepth</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> isFlattenable <span class=\"token keyword\">from</span> <span class=\"token string\">'./isFlattenable.js'</span>\n\n<span class=\"token comment\">/**\n * The base implementation of `flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">baseFlatten</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">,</span> predicate<span class=\"token punctuation\">,</span> isStrict<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  predicate <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>predicate <span class=\"token operator\">=</span> isFlattenable<span class=\"token punctuation\">)</span>\n  result <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> result\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value <span class=\"token keyword\">of</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>depth <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>depth <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Recursively flatten arrays (susceptible to call stack limits).</span>\n        <span class=\"token function\">baseFlatten</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> depth <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> predicate<span class=\"token punctuation\">,</span> isStrict<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>value<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isStrict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> baseFlatten</code></pre></div>\n<p>collection의 요소들을 iteratee에 넣고 돌린 결과들을 가지고 <code class=\"language-text\">baseFlatten</code> 함수에 전달하네요. 그러면 depth만큼 재귀적으로 함수를 반복한 결과를 반환합니다. 생각보다 단순합니다.</p>\n<blockquote>\n<p>여기에서 나머지 인자 predicate, isStrict는 사용하지 않는데, 설명만 읽고서는 어떤 역할인지 이해가 잘 안되네요.</p>\n</blockquote>","frontmatter":{"title":"lodash collection flatMapDeep 활용","date":"August 14, 2022"}}},"pageContext":{"slug":"/javascript/lodash-collection-flatmapdeep-활용/","previous":{"fields":{"slug":"/development/2021-09-22---한-권으로-배우는-Vue.js3-서평/"},"frontmatter":{"title":"한 권으로 배우는 Vue.js3 서평"}},"next":{"fields":{"slug":"/CI/CD/github-action으로-gatsby-블로그-github.io에-배포하기/"},"frontmatter":{"title":"github action으로 gatsby 블로그 github.io에 배포하기"}}}},"staticQueryHashes":["2486386679","3128451518"],"slicesMap":{}}