{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/2020-11-15---Node.js-15-변경점/","result":{"data":{"site":{"siteMetadata":{"title":"사진찍는 웹 개발자의 블로그","author":"Donghoon Song","siteUrl":"https://donghoon-song.github.io","comment":{"utterances":"donghoon-song/hoon-blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"b35b2434-535f-5d06-963d-5f4b068f83d6","excerpt":"주요 변경점 AbortController N-API Version 7 npm 7 Throw on unhandled rejections QUIC (experimental) V8 8.6 AbortController AbortController의 구현체를 실험적으로 포함합니다. AbortController는 하나 이상의 웹 요청을 필요할 때 중단시키는 인터페이스입니다. 자세한 설명은 아래의 링크를 참고하시면 됩니다. AbortController 위의 예제에서, ac.abort…","html":"<h1 id=\"주요-변경점\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9A%94-%EB%B3%80%EA%B2%BD%EC%A0%90\" aria-label=\"주요 변경점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주요 변경점</h1>\n<ul>\n<li>AbortController</li>\n<li>N-API Version 7</li>\n<li>npm 7</li>\n<li>Throw on unhandled rejections</li>\n<li>QUIC (experimental)</li>\n<li>V8 8.6</li>\n</ul>\n<h2 id=\"abortcontroller\" style=\"position:relative;\"><a href=\"#abortcontroller\" aria-label=\"abortcontroller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AbortController</h2>\n<p>AbortController의 구현체를 실험적으로 포함합니다. AbortController는 하나 이상의 웹 요청을 필요할 때 중단시키는 인터페이스입니다. 자세한 설명은 아래의 링크를 참고하시면 됩니다.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\">AbortController</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ac <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nac<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abort'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Aborted!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span> once<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nac<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">.</span>aborted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Prints True</span></code></pre></div>\n<p>위의 예제에서, ac.abort()가 호출될 때, AbortController가 abort event를 trigger합니다.</p>\n<p>AbortSignal에 달린 Eventlistener는 반드시 <code class=\"language-text\">{ once: true }</code> 옵션을 주거나 <code class=\"language-text\">EventEmitter의 once()</code> 메서드를 호출해 <code class=\"language-text\">abort</code> 이벤트를 한번만 핸들링하고 사라지도록 해야합니다.</p>\n<h2 id=\"n-api-7\" style=\"position:relative;\"><a href=\"#n-api-7\" aria-label=\"n api 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>N-API 7</h2>\n<p>우리는 새로운 N-API 버전을 다른 LTS Node.js 버전에도 백포트하여 사용합니다. N-API 7은 가장 최신 메이저 릴리즈 이후 새 버전이고, ArrayBuffers를 다루는 추가 메서드들을 포함합니다.</p>\n<blockquote>\n<p>백포트(backport) : 최신 버전의 소프트웨어 시스템 또는 소프트웨어 구성 요소에서 부품을 가져 와서 동일한 소프트웨어의 이전 버전으로 포팅하는 작업</p>\n</blockquote>\n<h2 id=\"npm-7\" style=\"position:relative;\"><a href=\"#npm-7\" aria-label=\"npm 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm 7</h2>\n<p>Node.js 15는 npm 7을 사용합니다. Npm 7에는 다양한 새로운 기능들이 추가되었습니다.</p>\n<ul>\n<li>npm workspace</li>\n<li>새로운 <code class=\"language-text\">package-lock.json</code> 포맷</li>\n<li><code class=\"language-text\">yarn.lock</code> 지원</li>\n<li>Peer dependency들이 기본적으로 설치됩니다!</li>\n</ul>\n<p><a href=\"https://github.blog/2020-10-13-presenting-v7-0-0-of-the-npm-cli/\">Presenting v7.0.0 of the npm CLI - The GitHub Blog</a></p>\n<h2 id=\"throw-on-unhandled-rejections\" style=\"position:relative;\"><a href=\"#throw-on-unhandled-rejections\" aria-label=\"throw on unhandled rejections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Throw on unhandled rejections</h2>\n<p>Node.js 15에서는 <code class=\"language-text\">unhandledRejection</code>에 대한 기본 mode가 <code class=\"language-text\">warn</code>에서 <code class=\"language-text\">throw</code>로 바뀝니다. <code class=\"language-text\">throw</code> mode에서는, <code class=\"language-text\">unhandledRejection</code> hook이 설정되어 있지 않으면, <code class=\"language-text\">unhandledRejection</code>는 uncaught exception으로 잡힙니다. <code class=\"language-text\">unhandledRejection</code> hook을 설정한 사용자들은 그대로 사용하면 됩니다. <code class=\"language-text\">-unhandled-rejections=mode</code> 라는 process flag를 사용하여 mode를 변경하는 것이 여전히 가능합니다.</p>\n<p>Node.js는 <code class=\"language-text\">UnhandledPromiseRejectionWarning</code>는 많은 버전에서 emit해왔는데, <a href=\"https://ko.surveymonkey.com/results/SM-82X6PX3B7/\">Node.js User Insights: Unhandled Promise Rejections</a> 설문조사와, <a href=\"https://github.com/nodejs/TSC/issues/916\">Node.js Technical Steering Committee vote</a> 의 결과를 바탕으로 mode를 <code class=\"language-text\">throw</code>로 변경하는 결정을 내렸습니다.</p>\n<h2 id=\"quicexperimental\" style=\"position:relative;\"><a href=\"#quicexperimental\" aria-label=\"quicexperimental permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>QUIC(experimental)</h2>\n<p>QUIC는 새로운 UDP 기반 transport protocol이며, HTTP/3의 기반이 됩니다. QUIC는 TLS 3.1, 흐름 제어, 오류 수정, 연결 마이그레이션 및 멀티플렉싱을 통한 내장된 보안 기능을 제공합니다.</p>\n<p>Node.js 15는 QUIC을 실험적으로 제공하고 있으며, <code class=\"language-text\">--experimental-quic</code> 라는 configuration flag를 통해 Node.js를 컴파일하면 사용할 수 있습니다. Node.js QUIC 구현체는 core <code class=\"language-text\">net</code> 모듈에서 expose 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createQuicSocket <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>‘net’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>QUIC에 대한 더 자세한 설명은 <a href=\"https://nodejs.org/dist/latest-v15.x/docs/api/quic.html\">Node.js 문서</a>를 참고하시면 됩니다.</p>\n<h2 id=\"v8-86\" style=\"position:relative;\"><a href=\"#v8-86\" aria-label=\"v8 86 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>V8 8.6</h2>\n<p>V8 자바스크립트 엔진이 V8 8.6으로 업데이트되었습니다. (V8 8.4가 Node.js 14에서 사용가능한 가장 최신버전이었습니다.)  성능 개선과 함께 V8 업데이트는 아래의 language feature를 포함합니다.</p>\n<ul>\n<li><code class=\"language-text\">Promise.any()</code> — <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any\">MDN</a> (from V8 8.5)</li>\n<li><code class=\"language-text\">AggregateError</code> — <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">MDN</a> (from V8 8.5)</li>\n<li><code class=\"language-text\">String.prototype.replaceAll()</code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\">MDN</a> (from V8 8.5)</li>\n<li>Logical assignment operators <code class=\"language-text\">&amp;&amp;=, ||=,</code> and <code class=\"language-text\">??=</code> — <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators\">MDN</a> (from V8 8.5)</li>\n</ul>\n<p><a href=\"https://nodejs.medium.com/node-js-v15-0-0-is-here-deb00750f278\">출처</a></p>","frontmatter":{"title":"[Node.js] Node.js 15 변경점 번역","date":"November 15, 2020"}}},"pageContext":{"slug":"/development/2020-11-15---Node.js-15-변경점/","previous":{"fields":{"slug":"/development/2020-10-01---Vue-Storybook-addon-docs-사용해서-docs-만들기/"},"frontmatter":{"title":"[Storybook] Vue Storybook addon-docs 사용해서 docs 만들기"}},"next":{"fields":{"slug":"/development/2020-12-02---serverless로-AWS-Lambda-배포-시-memory,-timeout-설정하기/"},"frontmatter":{"title":"[serverless] serverless로 AWS Lambda 배포 시 memory, timeout 설정하기"}}}},"staticQueryHashes":["2486386679","3128451518"],"slicesMap":{}}