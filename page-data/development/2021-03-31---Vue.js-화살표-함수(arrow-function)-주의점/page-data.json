{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/2021-03-31---Vue.js-화살표-함수(arrow-function)-주의점/","result":{"data":{"site":{"siteMetadata":{"title":"사진찍는 웹 개발자의 블로그","author":"Donghoon Song","siteUrl":"https://donghoon-song.github.io","comment":{"utterances":"donghoon-song/hoon-blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"d767a727-e74a-53ae-9808-3aa304c0e648","excerpt":"Vue.js의 data 및 lifcecycle hook(created, mounted…)에서 화살표 함수를 사용하면 어떻게 될까요? image image this가 라고 합니다. 왜 이런 일이 발생할까요? 공식문서에 설명이 나와 있습니다. Vue instance는 몇가지의 초기화 과정을 거칩니다. created, mounted 등의 생명주기 훅들은 this context가 Vue instance를 가리키도록 설정되고 나서 실행됩니다. 화살표 함수를 option property나 callback…","html":"<h3 id=\"vuejs의-data-및-lifcecycle-hookcreated-mounted에서-화살표-함수를-사용하면-어떻게-될까요\" style=\"position:relative;\"><a href=\"#vuejs%EC%9D%98-data-%EB%B0%8F-lifcecycle-hookcreated-mounted%EC%97%90%EC%84%9C-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%A0%EA%B9%8C%EC%9A%94\" aria-label=\"vuejs의 data 및 lifcecycle hookcreated mounted에서 화살표 함수를 사용하면 어떻게 될까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vue.js의 data 및 lifcecycle hook(created, mounted…)에서 화살표 함수를 사용하면 어떻게 될까요?</h3>\n<p><img src=\"https://user-images.githubusercontent.com/32301380/113174861-c6e2f380-9285-11eb-84f7-a6eb709dc537.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/32301380/113163015-bb3dff80-927a-11eb-89b0-0d3f966beaa4.png\" alt=\"image\"></p>\n<p>this가 <code class=\"language-text\">undefined</code>라고 합니다. 왜 이런 일이 발생할까요?</p>\n<p><a href=\"https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks\">공식문서</a>에 설명이 나와 있습니다.</p>\n<blockquote>\n<p>Vue instance는 몇가지의 초기화 과정을 거칩니다. created, mounted 등의 생명주기 훅들은 this context가 Vue instance를 가리키도록 설정되고 나서 실행됩니다. 화살표 함수를 option property나 callback (created, watch … ) 에서 실행하지 말아야 합니다. 화살표 함수는 this를 가지고 있지 않기 때문에 this는 다른 변수들처럼 부모 스코프까지 렉시컬하게 조회되어 <code class=\"language-text\">Uncaught TypeError: Cannot read property of undefined</code> 나 <code class=\"language-text\">Uncaught TypeError: this.myMethod is not a function</code> 같은 에러를 발생시킬 수 있습니다.</p>\n</blockquote>\n<p>저는 여기서 Vue가 <code class=\"language-text\">this context</code>를 어떻게 <code class=\"language-text\">Vue instance</code>에 바인딩하는지 궁금해졌습니다. Vue core 코드를 뜯어보았습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/32301380/113174801-b6327d80-9285-11eb-8f2e-42e6c038061d.png\" alt=\"image\"></p>\n<p>initMixin을 따라가봅니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/32301380/113174807-b894d780-9285-11eb-97bc-75642cf9a002.png\" alt=\"image\"></p>\n<p>initState가 data를 초기화하는 부분같습니다. initState를 따라갑니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/32301380/113174818-bc285e80-9285-11eb-93dc-942c57603ed5.png\" alt=\"image\"></p>\n<p>data가 있으면 initData를 호출합니다. 따라들어갑니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/32301380/114290899-ecf66800-9abd-11eb-904a-0e4acf891207.png\" alt=\"image\"></p>\n<p>data가 함수타입이면 getData를 실행합니다. 따라들어갑니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/32301380/113174829-bf234f00-9285-11eb-9a86-be48a52a0287.png\" alt=\"image\"></p>\n<p>드디어 찾고있던 마지막 종착지입니다. <code class=\"language-text\">data.call(vm,vm)</code>을 return합니다.</p>\n<p>lifecycle hook의 경우에는 어떨까요?\ninit.js에서 <code class=\"language-text\">callHook(vm, 'created')</code>를 따라갑니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/32301380/114291077-70fd1f80-9abf-11eb-880b-fd4283478cb0.png\" alt=\"image\"></p>\n<p>invokeWithErrorHandling에 vm을 넘겨주고 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/32301380/114291104-a275eb00-9abf-11eb-98ff-25af11ebcb55.png\" alt=\"image\"></p>\n<p>똑같이 <code class=\"language-text\">handler</code>에게 <code class=\"language-text\">context</code>를 바인딩하면서 실행합니다.</p>\n<p>예제를 만들어서 일반 함수와 화살표 함수의 동작원리를 비교해봤습니다. (Node.js 환경)</p>\n<p><img src=\"https://user-images.githubusercontent.com/32301380/113175262-3527b600-9286-11eb-92d3-3f5c70135703.png\" alt=\"image\"></p>\n<p>첫번째 예제에서는 this가 전부 전역 객체를 가리킵니다. ({})</p>\n<p><img src=\"https://user-images.githubusercontent.com/32301380/113175554-82a42300-9286-11eb-9690-c6ad6db3a0d1.png\" alt=\"image\"></p>\n<p>두번째 예제에서는 생성자 함수로 객체를 만들어 바인딩해봤습니다. 화살표 함수의 경우 this context가 vm을 가리키지 못합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/32301380/113175871-dc0c5200-9286-11eb-9daa-34717229e9fe.png\" alt=\"image\"></p>\n<p>call method의 첫번째 인자는 this, 두번째 인자부터는 함수의 매개변수로 값들이 전달됩니다. 화살표 함수도 vm을 잘 전달받습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/32301380/113176085-14ac2b80-9287-11eb-84f1-21589938598b.png\" alt=\"image\"></p>\n<p>결론적으로, data에서 this를 사용하는 경우 화살표 함수를 쓰고 싶다면 vm을 인수로 넘겨줘야 하는데 굳이 이렇게까지 해서 화살표 함수를 쓰는 이점이 있을까? 라는 생각이 듭니다.</p>\n<p>긴 글 읽어주셔서 감사합니다. 피드백은 언제나 환영입니다!</p>","frontmatter":{"title":"Vue.js 화살표 함수(arrow function) 주의점","date":"March 31, 2021"}}},"pageContext":{"slug":"/development/2021-03-31---Vue.js-화살표-함수(arrow-function)-주의점/","previous":{"fields":{"slug":"/development/2021-03-07---Django-framework로-간단한-api-만들기/"},"frontmatter":{"title":"Django framework로 간단한 api 만들기"}},"next":{"fields":{"slug":"/development/2021-09-22---한-권으로-배우는-Vue.js3-서평/"},"frontmatter":{"title":"한 권으로 배우는 Vue.js3 서평"}}}},"staticQueryHashes":["2486386679","3128451518"],"slicesMap":{}}