{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/2020-09-06---초보-컨트리뷰터의-Mocha-issue-해결-도전기/","result":{"data":{"site":{"siteMetadata":{"title":"사진찍는 웹 개발자의 블로그","author":"Donghoon Song","siteUrl":"https://donghoon-song.github.io","comment":{"utterances":"donghoon-song/hoon-blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"0eff6a29-4c3c-5222-b921-9027bb37db04","excerpt":"저는 현재 오픈소스 컨트리뷰톤 Mocha팀에서 멘티로 활동하고 있습니다. Mocha의 #4433 이슈를 해결하면서 배운 점들을 적어봤습니다. 최대한 raw하게, 혼잣말 하듯이 의식의 흐름대로 작성해보았습니다. 양해부탁드립니다 :) 저처럼 오픈소스에 대한 경험이 많이 없고, 두려운 초보자들에게 큰 도움이 되었으면 합니다. Mocha does not pass “—prof” parameter to Node and thus does not allow for profiling (#4433) Mocha…","html":"<p>저는 현재 오픈소스 컨트리뷰톤 Mocha팀에서 멘티로 활동하고 있습니다. Mocha의 #4433 이슈를 해결하면서 배운 점들을 적어봤습니다. 최대한 raw하게, 혼잣말 하듯이 의식의 흐름대로 작성해보았습니다. 양해부탁드립니다 :) 저처럼 오픈소스에 대한 경험이 많이 없고, 두려운 초보자들에게 큰 도움이 되었으면 합니다.</p>\n<h1 id=\"mocha-does-not-pass-prof-parameter-to-node-and-thus-does-not-allow-for-profiling-4433\" style=\"position:relative;\"><a href=\"#mocha-does-not-pass-prof-parameter-to-node-and-thus-does-not-allow-for-profiling-4433\" aria-label=\"mocha does not pass prof parameter to node and thus does not allow for profiling 4433 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mocha does not pass “—prof” parameter to Node and thus does not allow for profiling (#4433)</h1>\n<p><a href=\"https://github.com/mochajs/mocha/issues/4433\">Mocha does not pass “—prof” parameter to Node and thus does not allow for profiling · Issue #4433 · mochajs/mocha</a></p>\n<p>mocha에서 Node의 <code class=\"language-text\">—prof</code> argument를 넘겨줬는데 Node가 처리하지 못하는 이슈이다.</p>\n<p>멘토님께서 <code class=\"language-text\">lib/cli/node-flags.js</code>를 참고하라고 해주셨다. 링크를 열어보면, node에서 기본적으로 제공하는 flag의 목록이 보인다.</p>\n<p><a href=\"https://nodejs.org/dist/latest-v12.x/docs/api/process.html#process_process_allowednodeenvironmentflags\">Node.js v14.9.0 Documentation</a></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>cli<span class=\"token operator\">/</span>node<span class=\"token operator\">-</span>flags<span class=\"token punctuation\">.</span>js\n\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Some settings and code related to Mocha's handling of Node.js/V8 flags.\n * @private\n * @module\n */</span>\n\n<span class=\"token keyword\">const</span> nodeFlags <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>allowedNodeEnvironmentFlags<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>isMochaFlag<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./run-option-metadata'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>코드를 보면 <code class=\"language-text\">process.allowedNodeEnvironmentFlags</code>안에 node의 flag들이 들어있다. 그리고 <code class=\"language-text\">./lib/cli/run-option-metadata</code>안에 mocha flag들이 들어있다. <code class=\"language-text\">—-prof</code>는 이 두 곳에 속해있지 않았다.</p>\n<p>밑으로 내려가보면 다음 코드를 볼 수 있다. <code class=\"language-text\">node</code>와 <code class=\"language-text\">v8</code> 플래그를 여기서 따로 처리하는가보다. 이 목록에 <code class=\"language-text\">—-prof</code>가 빠져 있으니 추가하면 되지 않을까? 라는 생각이 먼저 들었다. 내가 해야하는 일은 <code class=\"language-text\">--prof</code> 플래그를 Node가 처리하도록 잘 넘겨주는 일이기 때문이다.</p>\n<p><code class=\"language-text\">—-prof</code>는 <code class=\"language-text\">node --v8-options</code>을 실행하면 나오는 옵션이기 때문이다. <code class=\"language-text\">—es-staging</code>도 여기서 찾을 수 있었다.  command 창에서 보기 힘들면, 다음 글에서 찾아보면 쉽다.</p>\n<p><a href=\"https://flaviocopes.com/node-runtime-v8-options/\">The Node.js Runtime v8 options list</a></p>\n<p>먼저, <code class=\"language-text\">isNodeFlag</code>가 어디서 쓰이는지 찾아보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>cli<span class=\"token operator\">/</span>node<span class=\"token operator\">-</span>flags<span class=\"token punctuation\">.</span>js\n\n<span class=\"token comment\">/**\n * Mocha has historical support for various `node` and V8 flags which might not\n * appear in `process.allowedNodeEnvironmentFlags`.\n * These include:\n *   - `--preserve-symlinks`\n *   - `--harmony-*`\n *   - `--gc-global`\n *   - `--trace-*`\n *   - `--es-staging`\n *   - `--use-strict`\n *   - `--v8-*` (but *not* `--v8-options`)\n * @summary Whether or not to pass a flag along to the `node` executable.\n * @param {string} flag - Flag to test\n * @param {boolean} [bareword=true] - If `false`, we expect `flag` to have one or two leading dashes.\n * @returns {boolean} If the flag is considered a \"Node\" flag.\n * @private\n */</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isNodeFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">flag<span class=\"token punctuation\">,</span> bareword <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bareword<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// check if the flag begins with dashes; if not, not a node flag.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^--?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// strip the leading dashes to match against subsequent checks</span>\n    flag <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^--?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// check actual node flags from `process.allowedNodeEnvironmentFlags`,</span>\n    <span class=\"token comment\">// then historical support for various V8 and non-`NODE_OPTIONS` flags</span>\n    <span class=\"token comment\">// and also any V8 flags with `--v8-` prefix</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isMochaFlag</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> nodeFlags <span class=\"token operator\">&amp;&amp;</span> nodeFlags<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    debugFlags<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?:preserve-symlinks(?:-main)?|harmony(?:[_-]|$)|(?:trace[_-].+$)|gc(?:[_-]global)?$|es[_-]staging$|use[_-]strict$|prof$|v8[_-](?!options).+?$)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>\n      flag\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음 파일에서 <code class=\"language-text\">isNodeFlag</code>를 찾을 수 있었고, <code class=\"language-text\">isNodeFlag</code>가 true이면 <code class=\"language-text\">nodeArgs</code>에 붙여주는 형식이었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>cli<span class=\"token operator\">/</span>options<span class=\"token punctuation\">.</span>js\n\n<span class=\"token comment\">/**\n * Wrapper around `yargs-parser` which applies our settings\n * @param {string|string[]} args - Arguments to parse\n * @param {Object} defaultValues - Default values of mocharc.json\n * @param  {...Object} configObjects - `configObjects` for yargs-parser\n * @private\n * @ignore\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">parse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> defaultValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>configObjects</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// save node-specific args for special handling.</span>\n  <span class=\"token comment\">// 1. when these args have a \"=\" they should be considered to have values</span>\n  <span class=\"token comment\">// 2. if they don't, they just boolean flags</span>\n  <span class=\"token comment\">// 3. to avoid explicitly defining the set of them, we tell yargs-parser they</span>\n  <span class=\"token comment\">//    are ALL boolean flags.</span>\n  <span class=\"token comment\">// 4. we can then reapply the values after yargs-parser is done.</span>\n  <span class=\"token keyword\">const</span> nodeArgs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> args <span class=\"token operator\">:</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> arg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> pair <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isNodeFlag : '</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isNodeFlag</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNodeFlag</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        flag <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^--?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">?</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>flag<span class=\"token punctuation\">,</span> pair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">:</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>flag<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> yargsParser<span class=\"token punctuation\">.</span><span class=\"token function\">detailed</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    configuration<span class=\"token punctuation\">,</span>\n    configObjects<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> defaultValues<span class=\"token punctuation\">,</span>\n    coerce<span class=\"token operator\">:</span> coerceOpts<span class=\"token punctuation\">,</span>\n    narg<span class=\"token operator\">:</span> nargOpts<span class=\"token punctuation\">,</span>\n    alias<span class=\"token operator\">:</span> aliases<span class=\"token punctuation\">,</span>\n    string<span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    array<span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">,</span>\n    number<span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>\n    boolean<span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span>boolean<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>nodeArgs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pair</span> <span class=\"token operator\">=></span> pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ansi<span class=\"token punctuation\">.</span><span class=\"token function\">red</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// reapply \"=\" arg values from above</span>\n  nodeArgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>아무 테스트 파일이나 실행시켜서, <code class=\"language-text\">—-es-staging</code> 옵션을 줄 때와 <code class=\"language-text\">—-prof</code> 옵션을 줄 때 결과가 똑같으면 될 것이라고 생각했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./bin/mocha ./test/only/bdd.spec.js --es-staging\n\nconsole.log<span class=\"token punctuation\">(</span><span class=\"token string\">'isNodeFlag : '</span>, isNodeFlag<span class=\"token punctuation\">(</span>flag, <span class=\"token boolean\">false</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'es-staging'</span>, <span class=\"token boolean\">true</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>이 목록에 <code class=\"language-text\">—-prof</code>가 빠져있으니 추가해준다. <code class=\"language-text\">—-prof</code>는 <code class=\"language-text\">mochaFlag</code>, <code class=\"language-text\">nodeFlag</code>, <code class=\"language-text\">debugFlag</code>가 아니므로 <code class=\"language-text\">네번째 or문</code>에서 처리된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>cli<span class=\"token operator\">/</span>node<span class=\"token operator\">-</span>flags<span class=\"token punctuation\">.</span>js\n\n<span class=\"token comment\">/**\n * Mocha has historical support for various `node` and V8 flags which might not\n * appear in `process.allowedNodeEnvironmentFlags`.\n * These include:\n *   - `--preserve-symlinks`\n *   - `--harmony-*`\n *   - `--gc-global`\n *   - `--trace-*`\n *   - `--es-staging`\n *   - `--use-strict`\n *   - '--prof'\n *   - `--v8-*` (but *not* `--v8-options`)\n * @summary Whether or not to pass a flag along to the `node` executable.\n * @param {string} flag - Flag to test\n * @param {boolean} [bareword=true] - If `false`, we expect `flag` to have one or two leading dashes.\n * @returns {boolean} If the flag is considered a \"Node\" flag.\n * @private\n */</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isNodeFlag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">flag<span class=\"token punctuation\">,</span> bareword <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bareword<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// check if the flag begins with dashes; if not, not a node flag.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^--?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// strip the leading dashes to match against subsequent checks</span>\n    flag <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^--?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// check actual node flags from `process.allowedNodeEnvironmentFlags`,</span>\n    <span class=\"token comment\">// then historical support for various V8 and non-`NODE_OPTIONS` flags</span>\n    <span class=\"token comment\">// and also any V8 flags with `--v8-` prefix</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isMochaFlag</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> nodeFlags <span class=\"token operator\">&amp;&amp;</span> nodeFlags<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    debugFlags<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?:preserve-symlinks(?:-main)?|harmony(?:[_-]|$)|(?:trace[_-].+$)|gc(?:[_-]global)?$|es[_-]staging$|use[_-]strict$|prof$|v8[_-](?!options).+?$)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>\n      flag\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>실행결과 똑같은 결과가 나왔다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./bin/mocha ./test/only/bdd.spec.js --prof\n\nconsole.log<span class=\"token punctuation\">(</span><span class=\"token string\">'isNodeFlag : '</span>, isNodeFlag<span class=\"token punctuation\">(</span>flag, <span class=\"token boolean\">false</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'prof'</span>, <span class=\"token boolean\">true</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>동작을 잘하는지 더 확실히 하고자 찾아봤는데, profiling을 하면 log file이 아웃풋 결과로 나온다고 한다. 잘 나오고 있었다!</p>\n<p><a href=\"https://nodejs.org/en/docs/guides/simple-profiling/\">Easy profiling for Node.js Applications | Node.js</a></p>\n<blockquote>\n<p>Since we ran our application using the —prof option, a tick file was generated in the same directory as your local run of the application. It should have the form isolate-0xnnnnnnnnnnnn-v8.log (where n is a digit).</p>\n</blockquote>\n<div style=\"text-align: center\">\n<img src=\"https://user-images.githubusercontent.com/32301380/92322688-ba8b1500-f06d-11ea-84dd-0a1cd4f0268b.png\"><br>\n<span>profiling 아웃풋 파일들</span>\n</div>\n<p>추가적으로, 멘토님께서 <code class=\"language-text\">./test/node-unit/cli/node-flags-spec.js</code> 파일에서 테스트도 작성하면 좋을 거 같다고 하셨다. 그래서 아래 테스트 구문까지 추가해서 pr을 작성했다 🙂</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">it<span class=\"token punctuation\">(</span><span class=\"token string\">'should return true for \"prof\" itself'</span>, <span class=\"token function-name function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  expect<span class=\"token punctuation\">(</span>isNodeFlag<span class=\"token punctuation\">(</span><span class=\"token string\">'prof'</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">'to be true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/mochajs/mocha/pull/4439\">Add support for node v8 option ‘prof’ parameter (#4433) by Donghoon759 · Pull Request #4439 · mochajs/mocha</a></p>\n<p>처음에는 되게 막막했는데, 코드를 따라가다보니 어디를 수정해야 될지 알 수 있었고, node flag를 주면 node가 처리하도록 넘기는구나, node에 profiling하는 옵션도 있구나 하는 새로운 내용도 배울 수 있어 좋았다. 정말 하면 할수록 알아가는 게 많았고, mocha 코드를 수정하는 pr은 처음이라 자신감도 붙었다!</p>","frontmatter":{"title":"[OpenSource] 초보 컨트리뷰터의 Mocha issue 해결 도전기","date":"September 06, 2020"}}},"pageContext":{"slug":"/development/2020-09-06---초보-컨트리뷰터의-Mocha-issue-해결-도전기/","previous":{"fields":{"slug":"/development/2020-08-22---Husky-사용/"},"frontmatter":{"title":"[Husky] Git hook library Husky 사용"}},"next":{"fields":{"slug":"/development/2020-09-09---초보-컨트리뷰터의-Nuxt-docs-PR-도전기/"},"frontmatter":{"title":"[OpenSource] 초보 컨트리뷰터의 Nuxt docs PR 도전기"}}}},"staticQueryHashes":["2486386679","3128451518"],"slicesMap":{}}